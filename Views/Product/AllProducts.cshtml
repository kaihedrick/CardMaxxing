@model IEnumerable<CardMaxxing.Models.ProductModel>
@using CardMaxxing.Models
@{
    ViewData["Title"] = "All Products";
    var cart = ViewBag.Cart as List<OrderItemsModel> ?? new List<OrderItemsModel>();
}

<div class="container mt-5">
    <h2 class="text-center mb-4">All Products</h2>
    
    <div class="mb-4">
        <div class="d-flex justify-content-center">
            <div class="input-group" style="max-width: 500px;">
                <input type="text" id="searchInput" class="form-control" placeholder="Search products..." name="searchTerm" autocomplete="off">
            </div>
            <button id="searchButton" class="search-button ms-2" type="button" tabindex="0">
                <i class="fas fa-search"></i>
            </button>
        </div>
    </div>

    <div class="row justify-content-center">
        @foreach (var product in Model)
        {
            var cartItem = cart?.FirstOrDefault(ci => ci.ProductID == product.ID);
            int quantity = cartItem?.Quantity ?? 0;

            <div class="col-md-4 mb-4">
                <div class="card shadow-lg rounded-4 p-3 text-center bg-light position-relative product-card"
                     style="cursor:pointer;"
                     onclick="window.location.href='@Url.Action("Details", "Product", new { id = product.ID })'">
                    <!-- Product Name & Description -->
                    <h5 class="fw-bold">@product.Name</h5>
                    <p class="text-muted">@product.Description</p>

                    <!-- Product Image -->
                    <img src="@product.ImageUrl" class="img-fluid rounded shadow-sm" alt="@product.Name"
                         style="max-height: 120px; object-fit: contain;">

                    <!-- Product Price -->
                    <p class="mt-2 fw-bold text-success">$@product.Price.ToString("0.00")</p>

                    <!-- Action Controls -->
                    @if (User.IsInRole("Admin"))
                    {
                        <div class="edit-product-container">
                            <button class="edit-product-btn" onclick="event.stopPropagation(); window.location.href='@Url.Action("EditProduct", "Product", new { id = product.ID })'">
                                <i class="fas fa-cog"></i> <!-- Larger cog icon -->
                            </button>
                        </div>
                    }
                    else if (User.IsInRole("User"))
                    {
                        <div class="d-flex justify-content-center align-items-center mt-3">
                            <div class="d-flex align-items-center">
                                <button class="btn btn-sm btn-outline-danger quantity-btn" onclick="event.stopPropagation(); updateCart('@product.ID', 'remove')">
                                    <i class="fas fa-minus"></i>
                                </button>

                                <span id="quantity-@product.ID" class="mx-2 fw-bold">@quantity</span>

                                <button class="btn btn-sm btn-outline-success quantity-btn" onclick="event.stopPropagation(); updateCart('@product.ID', 'add')">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function updateCart(productId, action) {
            fetch(`/User/UpdateCart`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ productId: productId, action: action })
            })
                .then(response => response.json())
                .then(data => {
                    let quantityElement = document.getElementById(`quantity-${productId}`);
                    if (quantityElement) {
                        quantityElement.innerText = data.quantity;
                    }
                })
                .catch(error => console.error("Error updating cart:", error));
        }

        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('searchButton');
            const productsContainer = document.querySelector('.row.justify-content-center');
            const originalContent = productsContainer.innerHTML;

            function performSearch() {
                const searchTerm = searchInput.value.trim();
                if (searchTerm === '') {
                    productsContainer.innerHTML = originalContent;
                    return;
                }

                productsContainer.innerHTML = '<div class="col-12 text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';

                fetch(`/Product/SearchPartial?searchTerm=${encodeURIComponent(searchTerm)}`)
                    .then(response => response.text())
                    .then(html => {
                        productsContainer.innerHTML = html;
                    })
                    .catch(error => {
                        console.error('Search error:', error);
                        productsContainer.innerHTML = '<div class="col-12 text-center"><div class="alert alert-danger">Search failed. Please try again.</div></div>';
                    });
            }

            searchInput.addEventListener('input', function(e) {
                if (searchInput.value.trim() === '') {
                    productsContainer.innerHTML = originalContent;
                }
            });

            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    performSearch();
                }
            });

            searchButton.addEventListener('click', performSearch);

            let debounceTimer;
            searchInput.addEventListener('input', function() {
                clearTimeout(debounceTimer);
                const searchTerm = searchInput.value.trim();

                debounceTimer = setTimeout(function() {
                    if (searchTerm === '') {
                        productsContainer.innerHTML = originalContent;
                        return;
                    }

                    productsContainer.innerHTML = '<div class="col-12 text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';

                    fetch(`/Product/SearchPartial?searchTerm=${encodeURIComponent(searchTerm)}`)
                        .then(response => response.text())
                        .then(html => {
                            productsContainer.innerHTML = html;
                        })
                        .catch(error => {
                            console.error('Search error:', error);
                            productsContainer.innerHTML = '<div class="col-12 text-center"><div class="alert alert-danger">Search failed. Please try again.</div></div>';
                        });
                }, 300); // 300ms debounce
            });
        });
    </script>
}
